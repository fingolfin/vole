  
  [1X3 [33X[0;0YTutorial[133X[101X
  
  
  [1X3.1 [33X[0;0YComputing the intersection of a normaliser and a stabiliser[133X[101X
  
  [33X[0;0YSuppose that we wish to compute the intersection of the stabiliser in [23XM_{12}[123X
  of  the  set [23XS:=\{1,2,4,5\}[123X with the normaliser of [23XH[123X in [23XG[123X, where [23XH[123X and [23XG[123X are
  defined by the generating sets given below:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XM12 := MathieuGroup(12);;[127X[104X
    [4X[25Xgap>[125X [27XS := [ 1, 2, 4, 5 ];;[127X[104X
    [4X[25Xgap>[125X [27XG := Group([(1,8,7,2,3,10,9,4)(5,6,11,12), (3,11)(4,12,6,8,10)]);;[127X[104X
    [4X[25Xgap>[125X [27XH := Group([(1,2,3,4,9,10,5,6,11,8)(7,12), (1,5,9)(6,12)(8,10)]);;[127X[104X
  [4X[32X[104X
  
  [33X[0;0YThus we wish to compute [23X{Stab}_{M_{12}}(\{1,2,3,5\}) \cap N_{G}(H)[123X.[133X
  
  [33X[0;0YFor future reference, we note that the result is a dihedral group with eight
  elements.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xanswer := Group([(1,2)(3,10)(4,5)(6,7)(8,9)(11,12),[127X[104X
    [4X[25X>[125X [27X                    (2,4)(3,7)(8,12)(9,11)]);[127X[104X
    [4X[28XGroup([ (1,2)(3,10)(4,5)(6,7)(8,9)(11,12), (2,4)(3,7)(8,12)(9,11) ])[128X[104X
    [4X[25Xgap>[125X [27XStructureDescription(answer);[127X[104X
    [4X[28X"D8"[128X[104X
  [4X[32X[104X
  
  
  [1X3.1-1 [33X[0;0YThe general [5XGAP[105X[101X[1X approach[133X[101X
  
  [33X[0;0YWith  the  [5XGAP[105X library, there are several ways to compute this. For example,
  we  can stick as closely to the statement as possible, and first compute the
  stabiliser and the normaliser separately, and then intersect them:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XIntersection(Stabiliser(M12, S, OnSets),[127X[104X
    [4X[25X>[125X [27X                Normaliser(G, H))[127X[104X
    [4X[25X>[125X [27X= answer;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YOr  we can slightly reformulate the task, and first intersect [23XM_{12}[123X with [23XG[123X,
  and  then  compute  the  stabiliser  of  the  set in that smaller group, and
  finally compute the normaliser of [23XH[123X in that (even smaller) stabiliser:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XM12andG := Intersection(M12, G);;[127X[104X
    [4X[25Xgap>[125X [27Xstab := Stabiliser(M12andG, S, OnSets);;[127X[104X
    [4X[25Xgap>[125X [27XNormaliser(stab, H) = answer;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YOr we could switch things in the previous example and compute the normaliser
  before computing the stabiliser in that normaliser:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XM12andG := Intersection(M12, G);;[127X[104X
    [4X[25Xgap>[125X [27Xnorm := Normaliser(M12andG, H);;[127X[104X
    [4X[25Xgap>[125X [27XStabiliser(norm, S, OnSets) = answer;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThere  are several further combinations. Each of the above strategies can be
  emulated  in  [5XVole[105X  by  prepending  “[10XVole.[110X” to the beginning of each call to
  [10XStabiliser[110X,   [10XNormaliser[110X,  and  [10XIntersection[110X,  as  described  in  Chapter [14X4[114X.
  However, this is not the recommended approach, as we will see below.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XLoadPackage("vole", false);;[127X[104X
    [4X[25Xgap>[125X [27Xstab := Vole.Stabiliser(M12, S, OnSets);;[127X[104X
    [4X[25Xgap>[125X [27Xnorm := Vole.Normaliser(G, H);;[127X[104X
    [4X[25Xgap>[125X [27Xanswer = Vole.Intersection(stab, norm);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  quickly  realise that solving our problem with the [5XGAP[105X library interface
  really  requires  three  separate  steps  to be undertaken in sequence. This
  raises some potential disadvantages.[133X
  
  [30X    [33X[0;6YAlthough each of the above strategies will give the correct answer, it
        is  not  obvious  which approach gives the best performance: should we
        compute  the normaliser in the stabiliser, or vice versa, or should we
        do something else? It is not necessarily easy to answer this.[133X
  
  [30X    [33X[0;6YBreaking  the  problem  up  into  three  separate steps requires three
        instances of a backtrack search, where each instance is unaware of the
        ones to come. This is not ideal for a number of reasons.[133X
  
        [30X    [33X[0;12YFirstly, backtrack search can be expensive, and so we should aim
              to minimise the number of times that it is required.[133X
  
        [30X    [33X[0;12YSecondly,  a  search  tends  to  be  quicker when there are more
              ‘restrictions’  on  the search space. Therefore, it is typically
              better  to perform one search with many restrictions rather than
              performing several searches that each have few restrictions.[133X
  
  
  [1X3.1-2 [33X[0;0YThe general [5XVole[105X[101X[1X approach[133X[101X
  
  [33X[0;0YThe  ‘[5XVole[105X’  way of solving this is problem is to do it in one step with the
  function [2XVoleFind.Group[102X ([14X5.2-2[114X).[133X
  
  [33X[0;0YFor  most  users,  the  easiest way to solve the problem with [2XVoleFind.Group[102X
  ([14X5.2-2[114X)  is  to  find  a collection of [13Xconstraints[113X that together specify the
  problem.  Constraints  are  discussed in Chapter [14X6[114X. The constraints directly
  offered  by  [5XVole[105X  are  contained  in  the  record  [2XVoleCon[102X ([14X6.2-1[114X), and are
  sufficient to solve the problem at hand.[133X
  
  [33X[0;0YSpecifically,  we  are  looking  for  all permutations that are contained in
  [23XM_{12}[123X,  that  stabilise  the set [23X\{1,2,3,5\}[123X, that are also contained in [23XG[123X,
  and that normalise [23XH[123X. Therefore, we can solve the problem with the following
  constraints:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XVoleFind.Group(VoleCon.InGroup(M12),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.Stabilize(S, OnSets),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.InGroup(G),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.Normalize(H))[127X[104X
    [4X[25X>[125X [27X= answer;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0Y[5XVole[105X performs only one search to solve the whole problem.[133X
  
  [33X[0;0YIn  order  to  solve  the  problem  as  specified,  [5XVole[105X chooses appropriate
  refiners for the given collection of constraints. Refiners are documented in
  Chapter [14X7[114X.  The more confident user may wish to directly specify one or more
  refiners instead of, and/or in addition to, some of the constraints.[133X
  
  [33X[0;0YFor  example, a user may know (or just hope) that the group [23XH[123X is well-suited
  to   the   technique  that  the  refiner  [10XGB_Con.NormaliserSimple[110X  from  the
  [5XGraphBacktracking[105X  package  uses  to refine for the normaliser. This refiner
  may   be   included   instead   of,   or   as   well   as,   the  constraint
  [10XVoleCon.Normalize(H)[110X,  since  the refiner implies that constraint, but it is
  perfectly  acceptable  (and  sometimes a good idea) to use multiple refiners
  for the same constraint.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XVoleFind.Group(VoleCon.InGroup(M12),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.Stabilize(S, OnSets),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.InGroup(G),[127X[104X
    [4X[25X>[125X [27X                  GB_Con.NormaliserSimple(H))[127X[104X
    [4X[25X>[125X [27X= answer;[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XVoleFind.Group(VoleCon.InGroup(M12),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.Stabilize(S, OnSets),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.InGroup(G),[127X[104X
    [4X[25X>[125X [27X                  VoleCon.Normalise(H),[127X[104X
    [4X[25X>[125X [27X                  GB_Con.NormaliserSimple(H))[127X[104X
    [4X[25X>[125X [27X= answer;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  
  [1X3.2 [33X[0;0YComputing a canonical image[133X[101X
  
  [33X[0;0YSee  the  end  of  the  manual  entry  for [2XVoleFind.Canonical[102X ([14X5.3-1[114X) for an
  example of canonisation with [5XVole[105X.[133X
  
