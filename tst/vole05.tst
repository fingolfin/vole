# Vole, chapter 5
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("vole05.tst");

# doc/_Chapter_Constraints.xml:37-43
gap> LoadPackage("vole", false);;
gap> Set(RecNames(VoleCon));
[ "Centralise", "Centralize", "InCoset", "InGroup", "InLeftCoset", 
  "InRightCoset", "LargestMovedPoint", "MovedPoints", "Normalise", 
  "Normalize", "Stabilise", "Stabilize", "Transport" ]

# doc/_Chapter_Constraints.xml:110-115
gap> con1 := VoleCon.InGroup(DihedralGroup(IsPermGroup, 8));;
gap> con2 := VoleCon.InGroup(AlternatingGroup(4));;
gap> VoleFind.Group(con1, con2) = Group([(1,3)(2,4), (1,4)(2,3)]);
true

# doc/_Chapter_Constraints.xml:131-134
gap> true;
true

# doc/_Chapter_Constraints.xml:148-151
gap> true;
true

# doc/_Chapter_Constraints.xml:165-168
gap> true;
true

# doc/_Chapter_Constraints.xml:194-197
gap> true;
true

# doc/_Chapter_Constraints.xml:222-225
gap> true;
true

# doc/_Chapter_Constraints.xml:242-245
gap> true;
true

# doc/_Chapter_Constraints.xml:262-265
gap> true;
true

# doc/_Chapter_Constraints.xml:281-284
gap> true;
true

# doc/_Chapter_Constraints.xml:297-302
gap> con1 := VoleCon.MovedPoints([1..5]);;
gap> con2 := VoleCon.MovedPoints([2,6,4,5]);;
gap> VoleFind.Group(con1, con2) = SymmetricGroup([2,4,5]);
true

# doc/_Chapter_Constraints.xml:315-319
gap> con := VoleCon.LargestMovedPoint(5);;
gap> VoleFind.Group(con) = SymmetricGroup(5);
true

#
gap> STOP_TEST("vole05.tst", 1);
