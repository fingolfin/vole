# Vole, chapter 4
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("vole04.tst");

# doc/_Chapter_interface.xml:40-44
gap> LoadPackage("vole", false);;
gap> Set(RecNames(VoleFind));
[ "Canonical", "CanonicalPerm", "Coset", "Group", "Rep", "Representative" ]

# doc/_Chapter_interface.xml:87-93
gap> tuple_transport := VoleCon.Transport([1,2,3], [1,2,4], OnTuples);;
gap> VoleFind.Rep(VoleCon.InGroup(SymmetricGroup(4)), tuple_transport);
(3,4)
gap> VoleFind.Rep(AlternatingGroup(4), tuple_transport);
fail

# doc/_Chapter_interface.xml:125-131
gap> graph_auto := VoleCon.Stabilise(JohnsonDigraph(4,2), OnDigraphs);;
gap> set_stab := VoleCon.Stabilise([2,4,6], OnSets);;
gap> G := VoleFind.Group(graph_auto, set_stab, 6);;
gap> G = Group([ (2,4)(3,5), (1,3,5)(2,6,4) ]);
true

# doc/_Chapter_interface.xml:135-142
gap> norm_PSL25 := VoleCon.Normalise(PSL(2,5));;
gap> in_A6  := VoleCon.InGroup(AlternatingGroup(6));;
gap> in_D12 := VoleCon.InGroup(DihedralGroup(IsPermGroup, 12));;
gap> G := VoleFind.Group(in_A6, in_D12, norm_PSL25);;
gap> G = Group([ (1,3,5)(2,4,6) ]);
true

# doc/_Chapter_interface.xml:183-186
gap> true;
true

# doc/_Chapter_interface.xml:329-332
gap> true;
true

# doc/_Chapter_interface.xml:359-364
gap> VoleFind.CanonicalPerm(AlternatingGroup(4),
>  VoleCon.Normalise(Group([ (1,2) ]))
> );
(1,4)(2,3)

# doc/_Chapter_interface.xml:374-380
gap> VoleFind.CanonicalPerm(SymmetricGroup(4),
>  VoleCon.Stabilise([ [1,2], [1,4], [2,3], [3,4] ], OnSetsSets),
>  VoleCon.Stabilise(CycleDigraph(4), OnDigraphs)
> );
(1,2,3)

#
gap> STOP_TEST("vole04.tst", 1);
